{"version":3,"sources":["./src/ui/Templates/TemplateList.ts","./src/ui/TemplateLoader/TemplateLoader.ts","./src/ui/Base/TemplateComponentOptions.ts"],"names":[],"mappings":"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","file":"TemplateLoader__64113771454b30c49073.js","sourcesContent":["import { Template, IInstantiateTemplateOptions, DefaultInstantiateTemplateOptions } from './Template';\nimport { DefaultResultTemplate } from './DefaultResultTemplate';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { Assert } from '../../misc/Assert';\nimport * as _ from 'underscore';\n\nexport class TemplateList extends Template {\n  constructor(public templates: Template[]) {\n    super();\n    Assert.exists(templates);\n  }\n\n  instantiateToString(object: IQueryResult, instantiateOptions: IInstantiateTemplateOptions = {}): string {\n    let merged = new DefaultInstantiateTemplateOptions().merge(instantiateOptions);\n\n    const filteredTemplates = _.reject(this.templates, t => t.role != null);\n    for (var i = 0; i < filteredTemplates.length; i++) {\n      var result = filteredTemplates[i].instantiateToString(object, merged);\n      if (result != null) {\n        return result;\n      }\n    }\n    return this.getFallbackTemplate().instantiateToString(object, instantiateOptions);\n  }\n\n  instantiateToElement(object: IQueryResult, instantiateOptions: IInstantiateTemplateOptions = {}): Promise<HTMLElement> {\n    let merged = new DefaultInstantiateTemplateOptions().merge(instantiateOptions);\n\n    const filteredTemplates = _.reject(this.templates, t => t.role != null);\n    for (var i = 0; i < filteredTemplates.length; i++) {\n      var promiseOfHTMLElement = filteredTemplates[i].instantiateToElement(object, merged);\n      if (promiseOfHTMLElement != null) {\n        return promiseOfHTMLElement;\n      }\n    }\n    return this.getFallbackTemplate().instantiateToElement(object, merged);\n  }\n\n  getFields() {\n    return _.reduce(this.templates, (fields: string[], template: Template) => fields.concat(template.getFields()), []);\n  }\n\n  getType() {\n    return 'TemplateList';\n  }\n\n  protected getFallbackTemplate(): Template {\n    return new DefaultResultTemplate();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Templates/TemplateList.ts","import { Template } from '../Templates/Template';\nimport { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { Assert } from '../../misc/Assert';\nimport { Initialization, IInitializationParameters } from '../Base/Initialization';\nimport { $$ } from '../../utils/Dom';\nimport * as _ from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport { TemplateComponentOptions } from '../Base/TemplateComponentOptions';\n\nexport interface ITemplateLoaderOptions {\n  template: Template;\n  condition?: String;\n}\n\n/**\n * The TemplateLoader component can load one result template into another. You should normally declare any reusable\n * result template outside of the {@link ResultList} component. Otherwise, the framework will evaluate the\n * `data-condition` of the reusable result template and possibly render it.\n *\n * **Example:**\n *\n * ```html\n * [ ... ]\n *\n * <!-- A reusable result template. Note that it is important to declare it outside of the ResultList component. -->\n * <script type='text/underscore' class='result-template' id='ReusableTemplate'>\n *   <table class='CoveoFieldTable'>\n *     <tr data-field='@source' data-caption='Source'></tr>\n *     <tr data-field='@percentScore' data-caption='Score'></tr>\n *   </table>\n * </script>\n *\n * [ ... ]\n *\n * <div class=\"CoveoResultList\" data-wait-animation=\"fade\" data-auto-select-fields-to-include=\"true\">\n *\n *   <!-- A custom result template for Lithium messages. -->\n *   <script type='text/underscore' class='result-template' data-condition='raw.filetype == \"lithiummessage\"'>\n *     <div>\n *       <img class='CoveoIcon' data-small='true'>\n *       <a class='CoveoResultLink'></a>\n *       <div class='CoveoTemplateLoader' data-template-id='ReusableTemplate'></div>\n *     </div>\n *   </script>\n *\n *   <!-- A custom result template for images. -->\n *   <script type='text/underscore' class='result-template' data-condition='raw.filetype == \"Image\"'>\n *     <div>\n *       <img class='CoveoIcon' data-small='true'></img>\n *         <a class='CoveoResultLink'>\n *           <img class='CoveoThumbnail'>\n *         </a>\n *       <div class='CoveoTemplateLoader' data-template-id='ReusableTemplate'></div>\n *     </div>\n *   </script>\n * </div>\n *\n * [ ... ]\n * ```\n *\n * See [Result Templates](https://developers.coveo.com/x/aIGfAQ).\n */\nexport class TemplateLoader extends Component {\n  static ID = 'TemplateLoader';\n\n  static doExport = () => {\n    exportGlobally({\n      TemplateLoader: TemplateLoader\n    });\n  };\n\n  /**\n   * The possible options for a TemplateLoader.\n   * @componentOptions\n   */\n  static options: ITemplateLoaderOptions = {\n    /**\n     * Specifies how to find the template. This can be either a CSS selector or an HTML `id` attribute.\n     *\n     * **Examples:**\n     *\n     * - With a CSS selector: `data-template-selector='.MySelector'`\n     * - With an HTML `id`: `data-template-id='MyId'`\n     */\n    template: TemplateComponentOptions.buildTemplateOption(),\n\n    /**\n     * Specifies the boolean condition that the result must satisfy in order for the template to load.\n     *\n     * **Example:**\n     *\n     * `data-condition='percentScore > 80'`\n     */\n    condition: ComponentOptions.buildStringOption()\n  };\n\n  /**\n   * Creates a new TemplateLoader.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the TemplateLoader component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param result The result to associate the component with.\n   */\n  constructor(\n    public element: HTMLElement,\n    public options?: ITemplateLoaderOptions,\n    public bindings?: IComponentBindings,\n    public result?: IQueryResult\n  ) {\n    super(element, TemplateLoader.ID, bindings);\n    this.options = ComponentOptions.initComponentOptions(element, TemplateLoader, options);\n    this.result = this.result || this.resolveResult();\n    Assert.exists(this.result);\n\n    if (this.options.condition != null) {\n      var conditionFunction = new Function('obj', 'with(obj||{}){return ' + this.options.condition + '}');\n      if (conditionFunction(this.result)) {\n        this.initialize();\n      }\n    } else {\n      this.initialize();\n    }\n  }\n\n  private initialize() {\n    if (this.options.template != null) {\n      var initOptions = this.searchInterface.options;\n      var initParameters: IInitializationParameters = {\n        options: initOptions,\n        bindings: this.bindings,\n        result: this.result\n      };\n\n      var parents = $$(this.element).parents(Component.computeCssClassName(TemplateLoader));\n      _.each(parents, (parent: HTMLElement) => {\n        let clone = <HTMLElement>parent.cloneNode();\n        $$(clone).empty();\n        let outerHTMLParent = clone.outerHTML;\n        Assert.check(outerHTMLParent.indexOf(this.element.outerHTML) === -1, 'TemplateLoader cannot load a template into itself.');\n      });\n\n      this.element.innerHTML = this.options.template.instantiateToString(this.result, {\n        checkCondition: false,\n        responsiveComponents: this.bindings ? this.bindings.searchInterface.responsiveComponents : null\n      });\n      Initialization.automaticallyCreateComponentsInside(this.element, initParameters);\n    }\n  }\n}\n\nInitialization.registerAutoCreateComponent(TemplateLoader);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/TemplateLoader/TemplateLoader.ts","import { TemplateCache } from '../Templates/TemplateCache';\nimport { TemplateList } from '../Templates/TemplateList';\nimport { UnderscoreTemplate } from '../Templates/UnderscoreTemplate';\nimport { HtmlTemplate } from '../Templates/HtmlTemplate';\nimport { Template } from '../Templates/Template';\nimport { IComponentOptions, IComponentOptionsOption, ComponentOptions, ComponentOptionsType } from './ComponentOptions';\nimport { Assert } from '../../misc/Assert';\nimport { Utils } from '../../utils/Utils';\nimport { compact, indexOf } from 'underscore';\n\nexport interface IComponentOptionsTemplateOptionArgs extends IComponentOptions<Template> {\n  /**\n   * Specifies the CSS selector the template must match. The first matching element in the page is used as the template\n   * option value, if this element is a valid template.\n   *\n   * If specified, this parameter takes precedence over [`idAttr`]{@link IComponentOptionsTemplateOptionArgs.idAttr}.\n   */\n  selectorAttr?: string;\n\n  /**\n   * Specifies the CSS selector the templates must match. The list of all matching, valid elements in the page is used\n   * as the template option value.\n   *\n   * Default value is `.`, followed by the hyphened name of the template option being configured (e.g.,\n   * `.content-template`, `.result-template`, `.sub-result-template`, `.preview-template`, etc.).\n   */\n  childSelector?: string;\n\n  /**\n   * Specifies the HTML `id` attribute the template must match. The corresponding template must be registered in\n   * the [`TemplateCache`]{@link TemplateCache} to be usable as the template option value.\n   *\n   * If specified, this parameter takes precedence over\n   * [`childSelector`]{@link IComponentOptionsTemplateOptionArgs.childSelector}.\n   */\n  idAttr?: string;\n}\n\nexport interface IComponentOptionsTemplateOption extends IComponentOptionsOption<Template>, IComponentOptionsTemplateOptionArgs {}\n\nexport class TemplateComponentOptions {\n  /**\n   * Builds a template option.\n   *\n   * The option accepts a CSS selector matching a valid template. This selector can either be a class, or an ID\n   * selector.\n   *\n   * When building a template option using an ID selector, the matching template must be registered in the\n   * [`TemplateCache`]{@link TemplateCache}, however.\n   *\n   * **Markup Examples:**\n   *\n   * > `data-foo-id=\"#bar\"`\n   *\n   * > `data-foo-selector=\".bar\"`\n   *\n   * @param optionArgs The arguments to apply when building the option.\n   * @returns {Template} The resulting option value.\n   */\n  static buildTemplateOption(optionArgs?: IComponentOptionsTemplateOptionArgs): Template {\n    return ComponentOptions.buildOption<Template>(ComponentOptionsType.TEMPLATE, TemplateComponentOptions.loadTemplateOption, optionArgs);\n  }\n\n  static loadTemplateOption(\n    element: HTMLElement,\n    name: string,\n    option: IComponentOptionsTemplateOption,\n    doc: Document = document\n  ): Template {\n    let template: Template;\n\n    // Attribute: template selector\n    const selectorAttr = option.selectorAttr || ComponentOptions.attrNameFromName(name, option) + '-selector';\n    const selector = element.getAttribute(selectorAttr) || ComponentOptions.getAttributeFromAlias(element, option);\n    if (selector != null) {\n      const templateElement = <HTMLElement>doc.querySelector(selector);\n      if (templateElement != null) {\n        template = TemplateComponentOptions.createResultTemplateFromElement(templateElement);\n      }\n    }\n    // Attribute: template id\n    if (template == null) {\n      const idAttr = option.idAttr || ComponentOptions.attrNameFromName(name, option) + '-id';\n      const id = element.getAttribute(idAttr) || ComponentOptions.getAttributeFromAlias(element, option);\n      if (id != null) {\n        template = TemplateComponentOptions.loadResultTemplateFromId(id);\n      }\n    }\n    // Child\n    if (template == null) {\n      let childSelector = option.childSelector;\n      if (childSelector == null) {\n        childSelector = '.' + name.replace(/([A-Z])/g, '-$1').toLowerCase();\n      }\n      template = TemplateComponentOptions.loadChildrenResultTemplateFromSelector(element, childSelector);\n    }\n    return template;\n  }\n\n  static createResultTemplateFromElement(element: HTMLElement): Template {\n    Assert.exists(element);\n    const type = element.getAttribute('type');\n    const mimeTypes =\n      'You must specify the type of template. Valid values are:' +\n      ' ' +\n      UnderscoreTemplate.mimeTypes.toString() +\n      ' ' +\n      HtmlTemplate.mimeTypes.toString();\n    Assert.check(Utils.isNonEmptyString(type), mimeTypes);\n\n    if (indexOf(UnderscoreTemplate.mimeTypes, type.toLowerCase()) != -1) {\n      return UnderscoreTemplate.create(element);\n    } else if (indexOf(HtmlTemplate.mimeTypes, type.toLowerCase()) != -1) {\n      return new HtmlTemplate(element);\n    } else {\n      Assert.fail('Cannot guess template type from attribute: ' + type + '. Valid values are ' + mimeTypes);\n      return undefined;\n    }\n  }\n\n  static loadResultTemplateFromId(templateId: string): Template {\n    return Utils.isNonEmptyString(templateId) ? TemplateCache.getTemplate(templateId) : null;\n  }\n\n  static loadChildrenResultTemplateFromSelector(element: HTMLElement, selector: string): Template {\n    const foundElements = ComponentOptions.loadChildrenHtmlElementFromSelector(element, selector);\n    if (foundElements.length > 0) {\n      return new TemplateList(compact(foundElements.map(element => TemplateComponentOptions.createResultTemplateFromElement(element))));\n    }\n    return null;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Base/TemplateComponentOptions.ts"],"sourceRoot":""}